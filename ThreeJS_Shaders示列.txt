ThreeJS_Shaders AI提问示例：

按照以下格式，帮我写一个 DVD 形状的圆环在电视机上四处弹跳的经典效果。具体要求如下：

**效果描述**：  
  - 显示一个代表 DVD 标志的圆环，在黑色背景上运动；  
  - 当圆环碰到屏幕边界时，应产生反弹效果，一直循环运动；  
  - 圆环下方需要显示“2002 DVD”的文字（可以使用占位符区域模拟）；  
  - 如果能够遵循物理规则（例如弹性碰撞）来模拟运动则更佳，不遵循物理规则也行。

---

**代码要求：**  
- 请完全重写 GLSL 代码，不基于给定代码的效果和逻辑做简单修改；  
- 创建全新的 Vertex Shader 和 Fragment Shader；  
- 直接使用内置的 **position** 属性，无需重复声明；  
- 避免版本声明：代码中完全没有 `#version` 行，防止与 Three.js 自动注入的版本声明冲突。

**输出格式：**  
请按照以下 Markdown 格式输出，并在代码中附上必要的参数调整注释：

---

## Vertex Shader
```glsl
// 此处不写任何版本声明，Three.js 会自动注入
// 直接使用内置的 attribute "position"（由 Three.js 提供）
void main() {
    gl_Position = vec4(position, 1.0);
}
```

## Fragment Shader
```glsl
precision mediump float;

uniform float u_time;       // 当前动画时间
uniform vec2  u_resolution; // 屏幕分辨率

// 模拟弹跳效果：将时间映射到 [0,1] 的区间并做镜像循环
float bounceMotion(float t, float speed) {
    float cycle = fract(t * speed * 0.5) * 2.0;
    if (cycle > 1.0) {
        cycle = 2.0 - cycle;
    }
    return cycle;
}

// 绘制圆环：若像素与圆心的距离在内外半径之间，则返回 1.0
float drawRing(vec2 uv, vec2 center, float innerR, float outerR) {
    float dist = distance(uv, center);
    return step(innerR, dist) * step(dist, outerR);
}

// 简单模拟“2002 DVD”文字区域（占位符）：在特定矩形内返回 1.0
float drawTextPlaceholder(vec2 uv, vec2 textCenter, vec2 textSize) {
    vec2 diff = abs(uv - textCenter);
    return step(diff.x, textSize.x * 0.5) * step(diff.y, textSize.y * 0.5);
}

void main() {
    // 将像素坐标归一化到 [0,1]
    vec2 uv = gl_FragCoord.xy / u_resolution;
    vec3 color = vec3(0.0); // 默认背景为黑色
    
    // 计算 DVD 圆环中心位置，利用 bounceMotion 实现弹跳效果
    float centerX = 0.1 + 0.8 * bounceMotion(u_time, 0.60);
    float centerY = 0.1 + 0.8 * bounceMotion(u_time, 0.83);
    vec2 ringCenter = vec2(centerX, centerY);
    
    // 绘制 DVD 圆环：内半径 0.10，外半径 0.13
    float ringMask = drawRing(uv, ringCenter, 0.10, 0.13);
    if(ringMask > 0.5) {
        color = vec3(1.0); // 圆环区域设置为白色
    }
    
    // 绘制 “2002 DVD” 的占位文本：位于圆环下方
    vec2 textCenter = ringCenter + vec2(0.0, -0.08);
    vec2 textSize = vec2(0.20, 0.03);
    float textMask = drawTextPlaceholder(uv, textCenter, textSize);
    if(textMask > 0.5) {
        color = vec3(1.0);
    }
    
    gl_FragColor = vec4(color, 1.0);
}
```